%{
open System
open Microsoft.FSharp.Collections
open AST
open Position
%}

%start start
%type  <AST.Expression> start
%token <string> STRING ID
%token <int64> INT
%token <float> FLOAT
%token <bool> BOOLEAN
%token <char> CHAR
%token O_SQR_BRACKET C_SQR_BRACKET O_BRACKET C_BRACKET DOT COMMA NULL NEW END 

%%

start : Expression END { $1 }

IdOrMember : Identifier { $1 :> Expression }
		   | Member     { $1 :> Expression }

ExprMemberCallRest : DOT IdOrMember ExprMemberCallRest { $2 :: $3 }
				   | DOT IdOrMember                    { [$2] }

ExprMemberCall : PrimaryExpr ExprMemberCallRest { List.fold (fun acc x -> new BinaryOperation(acc, MEMBER_CALL, x, pos) :> Expression) $1 $2 }
			   | PrimaryExpr                    { $1 } 

Expression : ExprMemberCall { $1 }

PrimaryExpr : Primary                        { $1 :> Expression}
		    | O_BRACKET Expression C_BRACKET { $2 }

Primary : Literal                        { $1 :> Primary }
		| Constructor                    { $1 :> Primary }
		| Member                         { $1 :> Primary }
		| Identifier                     { $1 :> Primary }

Identifier : ID { new Identifier($1, pos) }

Constructor : NEW ID Arguments { new Constructor($2, $3, pos) }

Member : ID Suffix { new Member($1, $2, pos) }

Suffix : ArrayElement { $1 :> Suffix }
	   | Arguments    { $1 :> Suffix }

ArrayElement : O_SQR_BRACKET Expression C_SQR_BRACKET { new ArrayElement($2, pos) }

Arguments : O_BRACKET C_BRACKET            { new Arguments([], pos) }
		  | O_BRACKET Expression C_BRACKET { new Arguments([$2], pos) }
		  | O_BRACKET Expression ArgsRest  { new Arguments($2 :: $3, pos) }

ArgsRest : COMMA Expression ArgsRest  { $2 :: $3 }
		 | COMMA Expression C_BRACKET { [$2] }

Literal : INT     { new IntegerLiteral($1, pos) :> Literal }
	    | FLOAT   { new FloatLiteral($1, pos) :> Literal } 
	    | NULL    { new NullLiteral(pos) :> Literal }
	    | CHAR    { new CharLiteral($1, pos) :> Literal }
	    | BOOLEAN { new BooleanLiteral($1, pos) :> Literal }
	    | STRING  { new StringLiteral($1, pos) :> Literal }
