// Signature file for parser generated by fsyacc
module Parser
type token = 
  | O_SQR_BRACKET
  | C_SQR_BRACKET
  | O_BRACKET
  | C_BRACKET
  | DOT
  | COMMA
  | NULL
  | NEW
  | END
  | CHAR of (char)
  | BOOLEAN of (bool)
  | FLOAT of (float)
  | INT of (int64)
  | STRING of (string)
  | ID of (string)
type tokenId = 
    | TOKEN_O_SQR_BRACKET
    | TOKEN_C_SQR_BRACKET
    | TOKEN_O_BRACKET
    | TOKEN_C_BRACKET
    | TOKEN_DOT
    | TOKEN_COMMA
    | TOKEN_NULL
    | TOKEN_NEW
    | TOKEN_END
    | TOKEN_CHAR
    | TOKEN_BOOLEAN
    | TOKEN_FLOAT
    | TOKEN_INT
    | TOKEN_STRING
    | TOKEN_ID
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_IdOrMember
    | NONTERM_ExprMemberCallRest
    | NONTERM_ExprMemberCall
    | NONTERM_Expression
    | NONTERM_PrimaryExpr
    | NONTERM_Primary
    | NONTERM_Identifier
    | NONTERM_Constructor
    | NONTERM_Member
    | NONTERM_Suffix
    | NONTERM_ArrayElement
    | NONTERM_Arguments
    | NONTERM_ArgsRest
    | NONTERM_Literal
/// This function maps integers indexes to symbolic token ids
val tagOfToken: token -> int

/// This function maps integers indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val start : (Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> (AST.Expression) 
