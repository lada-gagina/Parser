// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "Parser.fsy"

open System
open Microsoft.FSharp.Collections
open AST
open Position

# 13 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | O_SQR_BRACKET
  | C_SQR_BRACKET
  | O_BRACKET
  | C_BRACKET
  | DOT
  | COMMA
  | NULL
  | NEW
  | END
  | CHAR of (char)
  | BOOLEAN of (bool)
  | FLOAT of (float)
  | INT of (int64)
  | STRING of (string)
  | ID of (string)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_O_SQR_BRACKET
    | TOKEN_C_SQR_BRACKET
    | TOKEN_O_BRACKET
    | TOKEN_C_BRACKET
    | TOKEN_DOT
    | TOKEN_COMMA
    | TOKEN_NULL
    | TOKEN_NEW
    | TOKEN_END
    | TOKEN_CHAR
    | TOKEN_BOOLEAN
    | TOKEN_FLOAT
    | TOKEN_INT
    | TOKEN_STRING
    | TOKEN_ID
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_IdOrMember
    | NONTERM_ExprMemberCallRest
    | NONTERM_ExprMemberCall
    | NONTERM_Expression
    | NONTERM_PrimaryExpr
    | NONTERM_Primary
    | NONTERM_Identifier
    | NONTERM_Constructor
    | NONTERM_Member
    | NONTERM_Suffix
    | NONTERM_ArrayElement
    | NONTERM_Arguments
    | NONTERM_ArgsRest
    | NONTERM_Literal

// This function maps tokens to integers indexes
let tagOfToken (t:token) = 
  match t with
  | O_SQR_BRACKET  -> 0 
  | C_SQR_BRACKET  -> 1 
  | O_BRACKET  -> 2 
  | C_BRACKET  -> 3 
  | DOT  -> 4 
  | COMMA  -> 5 
  | NULL  -> 6 
  | NEW  -> 7 
  | END  -> 8 
  | CHAR _ -> 9 
  | BOOLEAN _ -> 10 
  | FLOAT _ -> 11 
  | INT _ -> 12 
  | STRING _ -> 13 
  | ID _ -> 14 

// This function maps integers indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_O_SQR_BRACKET 
  | 1 -> TOKEN_C_SQR_BRACKET 
  | 2 -> TOKEN_O_BRACKET 
  | 3 -> TOKEN_C_BRACKET 
  | 4 -> TOKEN_DOT 
  | 5 -> TOKEN_COMMA 
  | 6 -> TOKEN_NULL 
  | 7 -> TOKEN_NEW 
  | 8 -> TOKEN_END 
  | 9 -> TOKEN_CHAR 
  | 10 -> TOKEN_BOOLEAN 
  | 11 -> TOKEN_FLOAT 
  | 12 -> TOKEN_INT 
  | 13 -> TOKEN_STRING 
  | 14 -> TOKEN_ID 
  | 17 -> TOKEN_end_of_input
  | 15 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_IdOrMember 
    | 3 -> NONTERM_IdOrMember 
    | 4 -> NONTERM_ExprMemberCallRest 
    | 5 -> NONTERM_ExprMemberCallRest 
    | 6 -> NONTERM_ExprMemberCall 
    | 7 -> NONTERM_ExprMemberCall 
    | 8 -> NONTERM_Expression 
    | 9 -> NONTERM_PrimaryExpr 
    | 10 -> NONTERM_PrimaryExpr 
    | 11 -> NONTERM_Primary 
    | 12 -> NONTERM_Primary 
    | 13 -> NONTERM_Primary 
    | 14 -> NONTERM_Primary 
    | 15 -> NONTERM_Identifier 
    | 16 -> NONTERM_Constructor 
    | 17 -> NONTERM_Member 
    | 18 -> NONTERM_Suffix 
    | 19 -> NONTERM_Suffix 
    | 20 -> NONTERM_ArrayElement 
    | 21 -> NONTERM_Arguments 
    | 22 -> NONTERM_Arguments 
    | 23 -> NONTERM_Arguments 
    | 24 -> NONTERM_ArgsRest 
    | 25 -> NONTERM_ArgsRest 
    | 26 -> NONTERM_Literal 
    | 27 -> NONTERM_Literal 
    | 28 -> NONTERM_Literal 
    | 29 -> NONTERM_Literal 
    | 30 -> NONTERM_Literal 
    | 31 -> NONTERM_Literal 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 17 
let _fsyacc_tagOfErrorTerminal = 15

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | O_SQR_BRACKET  -> "O_SQR_BRACKET" 
  | C_SQR_BRACKET  -> "C_SQR_BRACKET" 
  | O_BRACKET  -> "O_BRACKET" 
  | C_BRACKET  -> "C_BRACKET" 
  | DOT  -> "DOT" 
  | COMMA  -> "COMMA" 
  | NULL  -> "NULL" 
  | NEW  -> "NEW" 
  | END  -> "END" 
  | CHAR _ -> "CHAR" 
  | BOOLEAN _ -> "BOOLEAN" 
  | FLOAT _ -> "FLOAT" 
  | INT _ -> "INT" 
  | STRING _ -> "STRING" 
  | ID _ -> "ID" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | O_SQR_BRACKET  -> (null : System.Object) 
  | C_SQR_BRACKET  -> (null : System.Object) 
  | O_BRACKET  -> (null : System.Object) 
  | C_BRACKET  -> (null : System.Object) 
  | DOT  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | NULL  -> (null : System.Object) 
  | NEW  -> (null : System.Object) 
  | END  -> (null : System.Object) 
  | CHAR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | BOOLEAN _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | FLOAT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | STRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 1us; 65535us; 6us; 7us; 2us; 65535us; 7us; 8us; 9us; 10us; 5us; 65535us; 0us; 11us; 13us; 11us; 27us; 11us; 30us; 11us; 35us; 11us; 5us; 65535us; 0us; 2us; 13us; 14us; 27us; 28us; 30us; 32us; 35us; 36us; 5us; 65535us; 0us; 9us; 13us; 9us; 27us; 9us; 30us; 9us; 35us; 9us; 5us; 65535us; 0us; 12us; 13us; 12us; 27us; 12us; 30us; 12us; 35us; 12us; 6us; 65535us; 0us; 19us; 6us; 4us; 13us; 19us; 27us; 19us; 30us; 19us; 35us; 19us; 5us; 65535us; 0us; 17us; 13us; 17us; 27us; 17us; 30us; 17us; 35us; 17us; 6us; 65535us; 0us; 18us; 6us; 5us; 13us; 18us; 27us; 18us; 30us; 18us; 35us; 18us; 1us; 65535us; 20us; 24us; 1us; 65535us; 20us; 25us; 2us; 65535us; 20us; 26us; 22us; 23us; 2us; 65535us; 32us; 34us; 36us; 37us; 5us; 65535us; 0us; 16us; 13us; 16us; 27us; 16us; 30us; 16us; 35us; 16us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 5us; 8us; 14us; 20us; 26us; 32us; 39us; 45us; 52us; 54us; 56us; 59us; 62us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 1us; 1us; 2us; 1us; 3us; 2us; 4us; 5us; 2us; 4us; 5us; 1us; 4us; 2us; 6us; 7us; 1us; 6us; 1us; 8us; 1us; 9us; 1us; 10us; 1us; 10us; 1us; 10us; 1us; 11us; 1us; 12us; 1us; 13us; 1us; 14us; 2us; 15us; 17us; 1us; 16us; 1us; 16us; 1us; 16us; 1us; 17us; 1us; 18us; 1us; 19us; 1us; 20us; 1us; 20us; 1us; 20us; 3us; 21us; 22us; 23us; 1us; 21us; 2us; 22us; 23us; 1us; 22us; 1us; 23us; 2us; 24us; 25us; 2us; 24us; 25us; 1us; 24us; 1us; 25us; 1us; 26us; 1us; 27us; 1us; 28us; 1us; 29us; 1us; 30us; 1us; 31us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 10us; 12us; 15us; 18us; 20us; 23us; 25us; 27us; 29us; 31us; 33us; 35us; 37us; 39us; 41us; 43us; 46us; 48us; 50us; 52us; 54us; 56us; 58us; 60us; 62us; 64us; 68us; 70us; 73us; 75us; 77us; 80us; 83us; 85us; 87us; 89us; 91us; 93us; 95us; 97us; |]
let _fsyacc_action_rows = 45
let _fsyacc_actionTableElements = [|9us; 32768us; 2us; 13us; 6us; 41us; 7us; 21us; 9us; 42us; 10us; 43us; 11us; 40us; 12us; 39us; 13us; 44us; 14us; 20us; 0us; 49152us; 1us; 32768us; 8us; 3us; 0us; 16385us; 0us; 16386us; 0us; 16387us; 1us; 32768us; 14us; 20us; 1us; 16389us; 4us; 6us; 0us; 16388us; 1us; 16391us; 4us; 6us; 0us; 16390us; 0us; 16392us; 0us; 16393us; 9us; 32768us; 2us; 13us; 6us; 41us; 7us; 21us; 9us; 42us; 10us; 43us; 11us; 40us; 12us; 39us; 13us; 44us; 14us; 20us; 1us; 32768us; 3us; 15us; 0us; 16394us; 0us; 16395us; 0us; 16396us; 0us; 16397us; 0us; 16398us; 2us; 16399us; 0us; 27us; 2us; 30us; 1us; 32768us; 14us; 22us; 1us; 32768us; 2us; 30us; 0us; 16400us; 0us; 16401us; 0us; 16402us; 0us; 16403us; 9us; 32768us; 2us; 13us; 6us; 41us; 7us; 21us; 9us; 42us; 10us; 43us; 11us; 40us; 12us; 39us; 13us; 44us; 14us; 20us; 1us; 32768us; 1us; 29us; 0us; 16404us; 10us; 32768us; 2us; 13us; 3us; 31us; 6us; 41us; 7us; 21us; 9us; 42us; 10us; 43us; 11us; 40us; 12us; 39us; 13us; 44us; 14us; 20us; 0us; 16405us; 2us; 32768us; 3us; 33us; 5us; 35us; 0us; 16406us; 0us; 16407us; 9us; 32768us; 2us; 13us; 6us; 41us; 7us; 21us; 9us; 42us; 10us; 43us; 11us; 40us; 12us; 39us; 13us; 44us; 14us; 20us; 2us; 32768us; 3us; 38us; 5us; 35us; 0us; 16408us; 0us; 16409us; 0us; 16410us; 0us; 16411us; 0us; 16412us; 0us; 16413us; 0us; 16414us; 0us; 16415us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 10us; 11us; 13us; 14us; 15us; 16us; 18us; 20us; 21us; 23us; 24us; 25us; 26us; 36us; 38us; 39us; 40us; 41us; 42us; 43us; 46us; 48us; 50us; 51us; 52us; 53us; 54us; 64us; 66us; 67us; 78us; 79us; 82us; 83us; 84us; 94us; 97us; 98us; 99us; 100us; 101us; 102us; 103us; 104us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 1us; 1us; 3us; 2us; 2us; 1us; 1us; 1us; 3us; 1us; 1us; 1us; 1us; 1us; 3us; 2us; 1us; 1us; 3us; 2us; 3us; 3us; 3us; 3us; 1us; 1us; 1us; 1us; 1us; 1us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 3us; 3us; 4us; 4us; 5us; 6us; 6us; 7us; 7us; 7us; 7us; 8us; 9us; 10us; 11us; 11us; 12us; 13us; 13us; 13us; 14us; 14us; 15us; 15us; 15us; 15us; 15us; 15us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 16386us; 16387us; 65535us; 65535us; 16388us; 65535us; 16390us; 16392us; 16393us; 65535us; 65535us; 16394us; 16395us; 16396us; 16397us; 16398us; 65535us; 65535us; 65535us; 16400us; 16401us; 16402us; 16403us; 65535us; 65535us; 16404us; 65535us; 16405us; 65535us; 16406us; 16407us; 65535us; 65535us; 16408us; 16409us; 16410us; 16411us; 16412us; 16413us; 16414us; 16415us; |]
let _fsyacc_reductions ()  =    [| 
# 198 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : AST.Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 207 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 19 "Parser.fsy"
                                              _1 
                   )
# 19 "Parser.fsy"
                 : AST.Expression));
# 218 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Identifier)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 21 "Parser.fsy"
                                               _1 :> Expression 
                   )
# 21 "Parser.fsy"
                 : 'IdOrMember));
# 229 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Member)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 22 "Parser.fsy"
                                         _1 :> Expression 
                   )
# 22 "Parser.fsy"
                 : 'IdOrMember));
# 240 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'IdOrMember)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'ExprMemberCallRest)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 24 "Parser.fsy"
                                                                              _2 :: _3 
                   )
# 24 "Parser.fsy"
                 : 'ExprMemberCallRest));
# 252 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'IdOrMember)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 25 "Parser.fsy"
                                                                  [_2] 
                   )
# 25 "Parser.fsy"
                 : 'ExprMemberCallRest));
# 263 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'PrimaryExpr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'ExprMemberCallRest)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 27 "Parser.fsy"
                                                                       List.fold (fun acc x -> new BinaryOperation(acc, MEMBER_CALL, x, pos) :> Expression) _1 _2 
                   )
# 27 "Parser.fsy"
                 : 'ExprMemberCall));
# 275 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'PrimaryExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 28 "Parser.fsy"
                                                              _1 
                   )
# 28 "Parser.fsy"
                 : 'ExprMemberCall));
# 286 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ExprMemberCall)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 30 "Parser.fsy"
                                                   _1 
                   )
# 30 "Parser.fsy"
                 : 'Expression));
# 297 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Primary)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 32 "Parser.fsy"
                                                                    _1 :> Expression
                   )
# 32 "Parser.fsy"
                 : 'PrimaryExpr));
# 308 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 33 "Parser.fsy"
                                                              _2 
                   )
# 33 "Parser.fsy"
                 : 'PrimaryExpr));
# 319 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Literal)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 35 "Parser.fsy"
                                                                _1 :> Primary 
                   )
# 35 "Parser.fsy"
                 : 'Primary));
# 330 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Constructor)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 36 "Parser.fsy"
                                                          _1 :> Primary 
                   )
# 36 "Parser.fsy"
                 : 'Primary));
# 341 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Member)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 37 "Parser.fsy"
                                                          _1 :> Primary 
                   )
# 37 "Parser.fsy"
                 : 'Primary));
# 352 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Identifier)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 38 "Parser.fsy"
                                                          _1 :> Primary 
                   )
# 38 "Parser.fsy"
                 : 'Primary));
# 363 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 40 "Parser.fsy"
                                       new Identifier(_1, pos) 
                   )
# 40 "Parser.fsy"
                 : 'Identifier));
# 374 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Arguments)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 42 "Parser.fsy"
                                                      new Constructor(_2, _3, pos) 
                   )
# 42 "Parser.fsy"
                 : 'Constructor));
# 386 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Suffix)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 44 "Parser.fsy"
                                          new Member(_1, _2, pos) 
                   )
# 44 "Parser.fsy"
                 : 'Member));
# 398 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ArrayElement)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 46 "Parser.fsy"
                                             _1 :> Suffix 
                   )
# 46 "Parser.fsy"
                 : 'Suffix));
# 409 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Arguments)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 47 "Parser.fsy"
                                          _1 :> Suffix 
                   )
# 47 "Parser.fsy"
                 : 'Suffix));
# 420 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 49 "Parser.fsy"
                                                                             new ArrayElement(_2, pos) 
                   )
# 49 "Parser.fsy"
                 : 'ArrayElement));
# 431 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 51 "Parser.fsy"
                                                                  new Arguments([], pos) 
                   )
# 51 "Parser.fsy"
                 : 'Arguments));
# 441 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 52 "Parser.fsy"
                                                            new Arguments([_2], pos) 
                   )
# 52 "Parser.fsy"
                 : 'Arguments));
# 452 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'ArgsRest)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 53 "Parser.fsy"
                                                            new Arguments(_2 :: _3, pos) 
                   )
# 53 "Parser.fsy"
                 : 'Arguments));
# 464 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'ArgsRest)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 55 "Parser.fsy"
                                                             _2 :: _3 
                   )
# 55 "Parser.fsy"
                 : 'ArgsRest));
# 476 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 56 "Parser.fsy"
                                                       [_2] 
                   )
# 56 "Parser.fsy"
                 : 'ArgsRest));
# 487 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int64)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 58 "Parser.fsy"
                                         new IntegerLiteral(_1, pos) :> Literal 
                   )
# 58 "Parser.fsy"
                 : 'Literal));
# 498 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : float)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 59 "Parser.fsy"
                                      new FloatLiteral(_1, pos) :> Literal 
                   )
# 59 "Parser.fsy"
                 : 'Literal));
# 509 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 60 "Parser.fsy"
                                      new NullLiteral(pos) :> Literal 
                   )
# 60 "Parser.fsy"
                 : 'Literal));
# 519 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : char)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 61 "Parser.fsy"
                                      new CharLiteral(_1, pos) :> Literal 
                   )
# 61 "Parser.fsy"
                 : 'Literal));
# 530 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : bool)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 62 "Parser.fsy"
                                      new BooleanLiteral(_1, pos) :> Literal 
                   )
# 62 "Parser.fsy"
                 : 'Literal));
# 541 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 "Parser.fsy"
                                      new StringLiteral(_1, pos) :> Literal 
                   )
# 63 "Parser.fsy"
                 : 'Literal));
|]
# 553 "Parser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 18;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : AST.Expression =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
